Documentation of the development process. 

I copied the whole project as z. BLANK PI-Videogames inside the project just as a backup. 
git commit -m "First commit: Blank project" 

Back-end. 
Created .env. 
Created DB through psql. 
Created Videogame.js model. Checked in PG Admin. 
Created user in rawg and copied the API_KEY to .env. 
Deleted unnecesary files: videogames.png, commentsEamples.jpg.
Added axios to package.json. Excecuted npm i. npm start works properly. 
Request to rawg to check names for DB. 
Created Genre.js model. 
Established relation between models. 
--- git commit -m "Created Videogame and Genre models. Made basic configurations."

Created indexRouter.jsx, handlers.jsx, controllers.js.
Copied to the res.send of each handler the steps without implementing them.Checked routes modularized in browser. 
Created Postman requests to test the four handlers. 
Checked controllers modularized. 
Created Postman request to post based on some data copied from the videogame with id 1 in the rawg api. 
--- git commit -m "Created indexRouter.js, handlers.js and controllers.js. Routes properly working modularized, yet without logic implementation". 

Added response with status 400 in the four catchs of the handlers. 
Implemented postVg controller including association with Genre model. 
Implemented getGenres. First request to rawg and execute findOrCreate. After first request, findAll in DB.
--- git commit -m "Implemented postVg and getGenres controllers"

Implemented getVgById controller. It searchs in the DB or in rawg according to the id. 
Added validations to postVg controller. 
--- git commit -m "Implemented getVgById controller"

Modularized controllers. 
Implemented getAllVg. It gets al the videogames from DB and from rawg. 
Added multiple console.log to check the lengths and debug. 
Added code to check that there are no duplicate elements in the final array. 
In the future, the code may be refactored using Promise.all. 
--- git commit -m "Implemented getAllVg controller. Modularized controllers."

Implemented logic for rawg data in getVgByName controller. 
Implemented logic for db data in getVgByName controller. 
Finished getVgByName. In the future, controllers may be remodularized with helpers. 
Refactored getAllVg controller with Promise.all to fetch the data more quickly.
Finished back-end. 
--- git commit -m "Implemented getVgByName controller. Refactored getAllVg controller"


-----------------------------------------

Front-end. 
Basic configuration:
- package.json. Added axios. Updated some dependencies: react, react-dom, react-router-dom, react-redux, react-scripts. npm i. npm start. 
- index.js. Replaced deprectaed ReactDom for createRoot. Deleted reportWebVitals. Envolved App into BrowserRouter. 
- index.css. B&W. 
- Deleted App.css and ReportWebVitals.jsx, App.test.js, setupTests.js.
--- git commit -m "Configured project. Created basic NIY views, components, routes and links."

Implemented Landing.jsx. 
Implemented Landing.module.css. 
--- git commit -m "Implemented Landing.jsx and Landing.module.css."

Implemented Card.jsx and Detail.jsx using a hardcoded videogame object.
Implemented Card.module.css and Detail.module.css. 
--- git commit -m "Implemented Card.jsx and Detail.jsx using a hardcoded videogame object. Implemented Card.module.css and Detail.module.css."


Styled Nav, Card, and Detail
--- git commit -m "Styled Nav, Card, and Detail. Added logo."

Detail.jsx. CHanged the render return to a conditional rendering. Added a local state videogameDetail. useEffect is executed after the render, so to render data that is loaded in a state (local or from redux), it is required to do a conditional rendering: if the state wasn't updadted, it render "Loading" or something equivalente. When the state changes (is updated through useEffect), the component is rerendered, now with the new data fetched. 
Implemented Detail.jsx fetching data from the server. 
Added NotFound.jsx and NetworkError.jsx components. Handled errors in the useEffect to navigate to the proper error component. 
Implemented validations in Detail.jsx. The states initializes as {}, so I can destructure it, since {}.name is undefined. 
git commit -m "Implemented Detail.jsx, including validations and errors handlers."


Next steps: 
- add objects to the hardcoded array, modularize it. wrap into the Cards.module.css.
- Implement redux. useSelector in Cards.jsx. receive a hardcodedArray from redux (import ir from the file with the hardcoded array). useDispatch in Home. 
- Replace hardcoded array with redux.  





- Filters, sortings, SearchBar, Pagination: don't implement yet. 
- view Form. Don't implement yet. 
