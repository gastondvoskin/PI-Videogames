Documentation of the development process. 

I copied the whole project as z. BLANK PI-Videogames inside the project just as a backup. 
git commit -m "First commit: Blank project" 

Back-end. 
Created .env. 
Created DB through psql. 
Created Videogame.js model. Checked in PG Admin. 
Created user in rawg and copied the API_KEY to .env. 
Deleted unnecesary files: videogames.png, commentsEamples.jpg.
Added axios to package.json. Excecuted npm i. npm start works properly. 
Request to rawg to check names for DB. 
Created Genre.js model. 
Established relation between models. 
--- git commit -m "Created Videogame and Genre models. Made basic configurations."

Created indexRouter.jsx, handlers.jsx, controllers.js.
Copied to the res.send of each handler the steps without implementing them.Checked routes modularized in browser. 
Created Postman requests to test the four handlers. 
Checked controllers modularized. 
Created Postman request to post based on some data copied from the videogame with id 1 in the rawg api. 
--- git commit -m "Created indexRouter.js, handlers.js and controllers.js. Routes properly working modularized, yet without logic implementation". 

Added response with status 400 in the four catchs of the handlers. 
Implemented postVg controller including association with Genre model. 
Implemented getGenres. First request to rawg and execute findOrCreate. After first request, findAll in DB.
--- git commit -m "Implemented postVg and getGenres controllers"

Implemented getVgById controller. It searchs in the DB or in rawg according to the id. 
Added validations to postVg controller. 
--- git commit -m "Implemented getVgById controller"

Modularized controllers. 
Implemented getAllVg. It gets al the videogames from DB and from rawg. 
Added multiple console.log to check the lengths and debug. 
Added code to check that there are no duplicate elements in the final array. 
In the future, the code may be refactored using Promise.all. 
--- git commit -m "Implemented getAllVg controller. Modularized controllers."

Implemented logic for rawg data in getVgByName controller. 
Implemented logic for db data in getVgByName controller. 
Finished getVgByName. In the future, controllers may be remodularized with helpers. 
Refactored getAllVg controller with Promise.all to fetch the data more quickly.
Finished back-end. 
--- git commit -m "Implemented getVgByName controller. Refactored getAllVg controller"


-----------------------------------------

Front-end. 
Basic configuration:
- package.json. Added axios. Updated some dependencies: react, react-dom, react-router-dom, react-redux, react-scripts. npm i. npm start. 
- index.js. Replaced deprectaed ReactDom for createRoot. Deleted reportWebVitals. Envolved App into BrowserRouter. 
- index.css. B&W. 
- Deleted App.css and ReportWebVitals.jsx, App.test.js, setupTests.js.
--- git commit -m "Configured project. Created basic NIY views, components, routes and links."

Implemented Landing.jsx. 
Implemented Landing.module.css. 
--- git commit -m "Implemented Landing.jsx and Landing.module.css."

Implemented Card.jsx and Detail.jsx using a hardcoded videogame object.
Implemented Card.module.css and Detail.module.css. 
--- git commit -m "Implemented Card.jsx and Detail.jsx using a hardcoded videogame object. Implemented Card.module.css and Detail.module.css."


Styled Nav, Card, and Detail
--- git commit -m "Styled Nav, Card, and Detail. Added logo."

Detail.jsx. CHanged the render return to a conditional rendering. Added a local state videogameDetail. useEffect is executed after the render, so to render data that is loaded in a state (local or from redux), it is required to do a conditional rendering: if the state wasn't updadted, it render "Loading" or something equivalente. When the state changes (is updated through useEffect), the component is rerendered, now with the new data fetched. 
Implemented Detail.jsx fetching data from the server. 
Added NotFound.jsx and NetworkError.jsx components. Handled errors in the useEffect to navigate to the proper error component. 
Implemented validations in Detail.jsx. The states initializes as {}, so I can destructure it, since {}.name is undefined. 
--- git commit -m "Implemented Detail.jsx, including validations and errors handlers."


Modularized hardcodedObjects and hardcodedArray into hardcodedVideogames.js. Imported into Cards.jsx and Detail.jsx. 
Added Provider to index.js. Created rootReducer.js with an initialState and returning a default. Created store.js. Checked Redux devtools. Created actions-types.js and actions.js. 
Copied validations from Detail.jsx to Card.jsx. 
Implemented Cards.module.css. 
Implemented getAllVg action with the request to the server. 
Detail.jsx would have a simpler implementation if I initialized the state with empty properties, because it would need less validations. 
Implemented Loading.jsx rendered in Detail.jsx and in Cards.jsx. 
NIY: Error handler with redux for getAllVg action. 
--- git commit -m "Implemented redux. Configured store, implemented getAllVg action, implemented case GET_ALL_VG in reducer. Implemented useSelector in Cards.jsx. Implmented useDispatch in Home.jsx. Implemented Loading.jsx"


Implemented PageNotFound for all other routes. 
Replace NotFound.jsx with PageNotFound.jsx. 
--- git commit -m "Implemented PageNotFound.jsx."

Implemented sortByAlphabet action, SORT_BY_ALPHABET case in reducer, controlled select box to dispatchs the sortByAlphabet action. 
--- git commit -m "Implemented sortByAlphabet action, SORT_BY_ALPHABET case in reducer, controlled select box to dispatchs the sortByAlphabet action."


Next steps: 
Sort by rating
May be Sorting Filters and Search should go in Home.jsx instead of the Nav. 

globalState: {
allVg: [], 
vgFilteredByGenre
vgFilteredBySource, 
currentVg: []
}
currentVg es Set(vgFilteredBy con 
el otro filter). 
El dispatch de Home guardar el payload en las cuatro propiedades. 
Cada filtro modifica su vgFilteredBy y ejecuta un Set para definir currentVg. Si el value es all, setea el valor de su filtro con el valor de allVg. 
Sort simplemente actúa sobre currentVg. 
Searchbar actúa solo sobre currentVg. 






Other day: 
SearchBar. 
- Add an action with a harcodedArray in the payload. Add the case in the reducer, this case filters allVg (global state property) to update currentVg. First send all the hardcodedArray. 
- useDispatch in SearchBar.jsx. First filter in the same way independtly of the changes. After, handleChanges. 
- useSelector in Home.jsx. Check if the data is rendered properly. 

- Implement handleChange and dubmit in Searchbar to send a differente argument according to the input value. 
- Filter properly in the reducer. 
- Make a real request with axios.  

- Pagination: don't implement yet. 
- view Form. Don't implement yet. 


- Filter by 
- Sortings. 
