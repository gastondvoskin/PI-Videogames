Documentation of the development process. 

I copied the whole project as z. BLANK PI-Videogames inside the project just as a backup. 
git commit -m "First commit: Blank project" 

Back-end. 
Created .env. 
Created DB through psql. 
Created Videogame.js model. Checked in PG Admin. 
Created user in rawg and copied the API_KEY to .env. 
Deleted unnecesary files: videogames.png, commentsEamples.jpg.
Added axios to package.json. Excecuted npm i. npm start works properly. 
Request to rawg to check names for DB. 
Created Genre.js model. 
Established relation between models. 
--- git commit -m "Created Videogame and Genre models. Made basic configurations."

Created indexRouter.jsx, handlers.jsx, controllers.js.
Copied to the res.send of each handler the steps without implementing them.Checked routes modularized in browser. 
Created Postman requests to test the four handlers. 
Checked controllers modularized. 
Created Postman request to post based on some data copied from the videogame with id 1 in the rawg api. 
--- git commit -m "Created indexRouter.js, handlers.js and controllers.js. Routes properly working modularized, yet without logic implementation". 

Added response with status 400 in the four catchs of the handlers. 
Implemented postVg controller including association with Genre model. 
Implemented getGenres. First request to rawg and execute findOrCreate. After first request, findAll in DB.
--- git commit -m "Implemented postVg and getGenres controllers"

Implemented getVgById controller. It searchs in the DB or in rawg according to the id. 
Added validations to postVg controller. 
--- git commit -m "Implemented getVgById controller"

Modularized controllers. 
Implemented getAllVg. It gets al the videogames from DB and from rawg. 
Added multiple console.log to check the lengths and debug. 
Added code to check that there are no duplicate elements in the final array. 
In the future, the code may be refactored using Promise.all. 
--- git commit -m "Implemented getAllVg controller. Modularized controllers."

Implemented logic for rawg data in getVgByName controller. 
Implemented logic for db data in getVgByName controller. 
Finished getVgByName. In the future, controllers may be remodularized with helpers. 
Refactored getAllVg controller with Promise.all to fetch the data more quickly.
Finished back-end. 
--- git commit -m "Implemented getVgByName controller. Refactored getAllVg controller"


-----------------------------------------

Front-end. 
Basic configuration:
- package.json. Added axios. Updated some dependencies: react, react-dom, react-router-dom, react-redux, react-scripts. npm i. npm start. 
- index.js. Replaced deprectaed ReactDom for createRoot. Deleted reportWebVitals. Envolved App into BrowserRouter. 
- index.css. B&W. 
- Deleted App.css and ReportWebVitals.jsx, App.test.js, setupTests.js.
--- git commit -m "Configured project. Created basic NIY views, components, routes and links."

Implemented Landing.jsx. 
Implemented Landing.module.css. 
--- git commit -m "Implemented Landing.jsx and Landing.module.css."

Implemented Card.jsx and Detail.jsx using a hardcoded videogame object.
Implemented Card.module.css and Detail.module.css. 
--- git commit -m "Implemented Card.jsx and Detail.jsx using a hardcoded videogame object. Implemented Card.module.css and Detail.module.css."


Styled Nav, Card, and Detail
--- git commit -m "Styled Nav, Card, and Detail. Added logo."

Detail.jsx. CHanged the render return to a conditional rendering. Added a local state videogameDetail. useEffect is executed after the render, so to render data that is loaded in a state (local or from redux), it is required to do a conditional rendering: if the state wasn't updadted, it render "Loading" or something equivalente. When the state changes (is updated through useEffect), the component is rerendered, now with the new data fetched. 
Implemented Detail.jsx fetching data from the server. 
Added NotFound.jsx and NetworkError.jsx components. Handled errors in the useEffect to navigate to the proper error component. 
Implemented validations in Detail.jsx. The states initializes as {}, so I can destructure it, since {}.name is undefined. 
--- git commit -m "Implemented Detail.jsx, including validations and errors handlers."


Modularized hardcodedObjects and hardcodedArray into hardcodedVideogames.js. Imported into Cards.jsx and Detail.jsx. 
Added Provider to index.js. Created rootReducer.js with an initialState and returning a default. Created store.js. Checked Redux devtools. Created actions-types.js and actions.js. 
Copied validations from Detail.jsx to Card.jsx. 
Implemented Cards.module.css. 
Implemented getAllVg action with the request to the server. 
Detail.jsx would have a simpler implementation if I initialized the state with empty properties, because it would need less validations. 
Implemented Loading.jsx rendered in Detail.jsx and in Cards.jsx. 
NIY: Error handler with redux for getAllVg action. 
--- git commit -m "Implemented redux. Configured store, implemented getAllVg action, implemented case GET_ALL_VG in reducer. Implemented useSelector in Cards.jsx. Implmented useDispatch in Home.jsx. Implemented Loading.jsx"


Implemented PageNotFound for all other routes. 
Replace NotFound.jsx with PageNotFound.jsx. 
--- git commit -m "Implemented PageNotFound.jsx."

Implemented sortByAlphabet action, SORT_BY_ALPHABET case in reducer, controlled select box to dispatch the sortByAlphabet action. 
--- git commit -m "Implemented sortByAlphabet action, SORT_BY_ALPHABET case in reducer, controlled select box to dispatchs the sortByAlphabet action."


Implemented sortByRating action, SORT_BY_RATING case in reducer, controlled select box to dispatch the sortByRating action. Unified select box of alphabet and rating sortings. Moved renderiing of Filters and Sortings from Nav to Home. 
--- git commit -m "Implemented sortByRating action, SORT_BY_RATING case in reducer, controlled select box to dispatch the sortByRating action. Modularized Filters.jsx into Filters.jsx and Sortings.jsx. Unified select box of alphabet and rating sortings. Moved renderiing of Filters and Sortings from Nav to Home."


Created Pagination.jsx with a hardcoded array. 
Implemented handleFilterByCreator handler, filterByCreator action, FILTER_BY_CREATOR case in reducer modifying the global initialState to combine the filters (added filteredByCreator and filteredByGenres properties). Modified GET_ALL_VG case to combine filters. 
--- git commit -m "Implemented Filter by creator: filterByCreator action, FILTER_BY_CREATOR case in reducer, handleFilterByCreator handler. Adapted global initialState and GET_ALL_VG case in reducer in order to combine filters. Created Pagination NIY."


Implemented Filter by genre. With each filter I update first the individual property in the global state, and after that I update the currentVg in order to combine the filters. 
To improve: if there is no videogame with the specified filters, Cards renders Loading. To change this, I should initialize the globalState in the reducer with currentVg: null, and adapt the validation in Cards.jsx to render Loading or the videogames. 
To improve: Sortings act in currentVg, but if I apply a filter, the sort is lost. To change this, I should add a property in the global initialState sort: '', and when dispatching a sort action, set it with the payload, eg 'z_a' and, when filtering add code in the reducer to dispatch an action to sort again after filtering. An easier implementation is to clarify that the sort is reset after the filter action is dispatched. To dos this, change the local state of the sort. The issue is that Sorting.jsx and Filters.jsx ar in different files, then they have differente localStates. Maybe I should reunify them and add a reset button that affects the trhee selects. 
--- git commit -m "Implemented Filter by genre: handler, action, reducer"


Unified Filters.jsx, Sortings.jsx and Searchbar.jsx into Filters.jsx in order to share a localState. Added setOrder('') to filters after dispatching an action. 
Styles Loading and Filters. 
--- git commit -m "Unified Filters.jsx, Sortings.jsx and Searchbar.jsx into Filters.jsx. Updated styles to Loading, Card, and Filters."


Implemented SearchBar. I can't combine this filter with the other ones because with the getAllVg filteredByCreator and FilteredByGenre only saves 150 videogames, while the searchBar searchs in all the DB. If getAllVg searched in all the DB, the code would be: 
const currentVg = [...filteredByName].filter((vg) => {
    console.log(state.filteredByCreator.includes(vg) && state.filteredByGenre.includes(vg))
    return state.filteredByCreator.includes(vg) && state.filteredByGenre.includes(vg)
});
Currently, the code just returns {...state, currentVg: filteredByName}
On the handleSearchSubmit, I reset the filters and sortings after submiting. 
--- git commit -m "Implemented SearchBar in Filters.jsx."


Back-end. Adapted getvgByNameController.js to make stricter searchs in rawg api, including only the results with the same filter used for the db. (lines 46 and 52).
Refactored handleFilters to reset searchBar input value. 
Capabilities of the app: 
- render 150 videogames and videogames from DB. 
- filter by name ALL the videogames and sort the results. 
- view more information about ALL the videogames.
- filter by creator, and genres the 150 videogames (set in the back-end for performance) combining this two filters, and sort the results. 
- sort the 150 videogames chosing one criteria out of four. 
- reset filters to render the 150 videogames. 
- add a videogame to the database and render it like any other videogame. 
--- git commit -m "Refactored getvgByNameController.js (back-end) to unify search criteria for rawg api and db. Refactored handleFilters to reset searchBar input value." 


Pagination. Implemented setPage action (action-types, actions, reducer). Added page to the initial global state. Implemented Pagination.jsx. It receives numberOfPages through props and renders buttons accordingly. When a button is clicked, it dispatchs an action to update the pageNumber (this property is not relevant for Pagination.jsx but for Cards.jsx). 
Cards.jsx. Conditionally rendered: if typeof currentVg === 'string', it renders that no videogames were found. This works because of the backend in the getVgByName controller. Adapt what is neededto get the same response with the filters. 
redecer.js. Added: if (!currentVg.length) {currentVg = "No videogames were found with the provided filters."} in FILTER_BY_CREATOR and in FILTER_BY_GENRE cases. 
--- git commit -m "Implemented Pagination.jsx and the updatePageNumber action. Improved Cards.jsx and reducer's FILTER_BY_CREATOR and FILTER_BY_GENRE cases to conditionally render No videogames found with the provided filters."


Cards.jsx. Implemented logic to map renderedVg instead of currentVg to render Card.jsx. 
Made diagram in diagrams.app of React-redux Videogames flow. 
Filters.jsx. Added dispatch(updatePageNumber(1)) to the six handlers to reset the pageNumber to 1 after filtering or sorting. 
--- git commit -m "Implemented logic to map renderedVg instead of currentVg (components Home.jsx and Cards.jsx). Added dispatch(updatePageNumber(1)) to Filters.jsx handlers. Added basic Client flow diagram". 


Implemented getGenres action: actions-types, actions, reducer (makes a request to the server). Dispatched action in Home.jsx inside the useEffect. useSelector in Filters.jsx. Replaced hardcodedGenres array for genres from the server, when mapping genres for the genres filter. 
--- git commit -m "Implemented getGenres action: actions-types, actions, reducer, dispatch in Home.jsx, useSelector in Filters.jsx, replaced hardcodedGenres array for genres."


Replaced the render of Pagination for a conditional render: typeof currentVg !== 'string' && <Pagination numberOfPages={numberOfPages}/>
Started Form.jsx. Created basic labels, inputs, submitButton and changeHandlers. 
--- git commit -m "Started Form.jsx: basic labels, inputs, submitButton, changeHandlers, Form.module.css. Conditionally rendered Pagination in Home.jsx." 


Changed rating and released input types. 
Implemented validations for name, image, description, released, rating fields. 
Implemented addPlatformButton and deletePlatformButton. 
Implemented validations for platforms fields. 
Next step: genres input. 
--- git commit -m "Implemented Form validations for name, image, description, released, rating and platforms."


Added genres inputs with checkbox type.
Added genresCheckboxs localState. 
Implemented handleGenresChange. It controls the ckecked property, it sets genres property from vg and it validates genres. 
Implemented handleSubmit.
Implemented uptadeWithNewVg action dispatched in submitHandler. 
Implemented validateSubmit. If it is ok, window.alert("created OK"). Reset after submitting. 
Conditionally rendered specific errors when submitting. This errors will persist until next submit. 
--- git commit -m "Implemented Form.jsx genres checkboxs and validations. Implemented Form.jsx submit validations and handlers."


Form.jsx. Replaced hardcodedGenres with a allGenres from the globalState. 
getAllVgController.js. Replaced const numberOfResultsExpected from 40 to 150. 
getAllVgController.js and getVgByIdController.js. Replaced platforms for parent_platforms. 
Form.jsx. Modularized validateFunctions. The functions now return an errorMessage instead of changing the localState. In Form.jsx these functions are excuted, and depending on the result, they change the localState to a string like "Required field" or to "" when there is no error. Replaced handleNameChange, handleDescriptionChange and others with a general handleChange. Replaced it in the return. Added the name property to all the inputs to dinamically controll them and validate them with the handleChange function. Modularized validateSubmit and refactored it. getGenres doen't work properly if the user goes directly to /form, because the localState seems to be initialized as an uncontrolled form. Added autocomplete function in Form for develop purposes. 
--- git commit -m "Refactored and modularized Form.jsx. Replaced hardcodedGenres. Replaced numberOfResultsExpected from 40 to 150 in getAllVgController. Replaced platforms for parent_platform in getVgByIdController.js" 

Implemented About.jsx. Added the route in App.js.
--- git commit -m "Implemented About.jsx."


Nav.jsx. Implemented NavLink instead of a Link with a button inside. Replaced + Add game for Admin. Divided the logo and the Nav. Styled the Nav.
--- git commit -m "Refactored Nav.jsx and Nav.module.css"


Footer.jsx. Implemented Footer.jsx. 
--- git commit -m "Implemented Footer.jsx."


Moved harcoded arrays and hardcoded objects to a new folder. 
WIP: Styled various components. 
--- git commit -m "Styled various components (WIP)."


WIP: Styled Filters.jsx and made minor style changes in other components.
--- git commit -m "WIP: Styled Filters.jsx and made minor style changes in other components."


Styled Pagination.jsx. 
--- git commit -m "Styled Pagination.jsx."


Styled Card.jsx.
--- git commit -m "Styled Card.jsx and made minor style changes in other components."


Changed the name PageNotFound for Error404. Replaced NetworkError component for a simple <div> element. Reordered assets files into folders. 
Styled Error404.jsx. 
--- git commit -m "Styles Error404.jsx. Reordered assets files into folders."

Next step: 
. Error404. 
. Landing
. Form.
. About. 
. Detail. 

. Image for the background. 
https://www.google.com/imgres?imgurl=https%3A%2F%2Flookaside.fbsbx.com%2Flookaside%2Fcrawler%2Fmedia%2F%3Fmedia_id%3D843772036142486&tbnid=8rYH9tGtkEW1qM&vet=12ahUKEwjbvo3Fk5n_AhVgpZUCHaa6CRgQMyhBegUIARCFAQ..i&imgrefurl=https%3A%2F%2Fwww.facebook.com%2F591228718063487%2Fposts%2Ffondos-de-pantalla-gamers-al-estilo-de-los-videojuegoscomparte-con-tus-amigos-_%2F843772449475778%2F&docid=zRpDqVFYvJJieM&w=480&h=854&q=fondos%20de%20pantalla%20gamer&hl=es&ved=2ahUKEwjbvo3Fk5n_AhVgpZUCHaa6CRgQMyhBegUIARCFAQ

https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.pexels.com%2Fes-es%2Fbuscar%2FFondo%2520de%2520pantalla%25204k%2F&psig=AOvVaw3wyZG6m1GBr79yyO-jFW0l&ust=1685402452410000&source=images&cd=vfe&ved=0CBEQjRxqFwoTCLDNj8aTmf8CFQAAAAAdAAAAABAF

. Image for the Landing background. 
. Themes. https://paletadecolores.com.ar/
. Font-sizes for h1, h2, h3 and p. 

. Change the color to the button in Pagination when it is selected. border-radius. 
. Change the percentage of the right side in Form.jsx. Add other elements. 
. About. Add linkedin and github. 


Next step: 
- Testing

- Analyze VideogamesClientFlow.png (https://app.diagrams.net/).
- Add back-end flow diagram. 
- Add testing to api and to client. 
- Deploy
- Record a presentation to upload to Youtube and to be prepared for the PI presentation in Henry. 


Ideas for the future: 
- Form.jsx. Add a "See your last created videogame" in the right side.
- style the Form.jsx window alert. 
- Form.jsx genres controlled by localState even if the user goes directly to /form. Render all videogames in Home after creating a new one (without refreshing the page). 